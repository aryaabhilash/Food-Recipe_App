var Panel = ReactBootstrap.Panel;
var Accordion = ReactBootstrap.Accordion;
var PanelGroup = ReactBootstrap.PanelGroup;
var Button = ReactBootstrap.Button,
  Input = ReactBootstrap.Input;
var Popover = ReactBootstrap.Popover;
var Tooltip = ReactBootstrap.Tooltip;
var ButtonToolbar = ReactBootstrap.ButtonToolbar;
var Modal = ReactBootstrap.Modal;
var ListGroup = ReactBootstrap.ListGroup,
  ListGroupItem = ReactBootstrap.ListGroupItem;

if(!localStorage.getItem("Neer Dosa (Default Example)")){ localStorage.setItem("Neer Dosa (Default Example)",'[{"value":"Neer Dosa (Default Example)"},{"value":"Firstly, soak 1 cup rice for 5-6 hours. Drain off the water completely and transfer to blender. Also add ½ cup coconut. Blend to smooth paste without adding much water. Now add 1 tsp salt and 2½ cup water. Mix well making sure the batter is thin watery consistency. Now carefully pour the dosa batter over hot tawa. Cover and cook for 1 minute on medium flame. Once the dosa is cooked completely, it is ready to serve. Do not cook neer dose on both sides. Finally, fold the dosa and serve neer dose / neer dosa immediately with mint chutney or coconut chutney."},{"value":"1 cup sona masuri rice / dosa rice"},{"value":"½ cup coconut, grated"},{"value":"1 tsp salt"},{"value":"2½ cup water"}]');}

var ModalIngredients = React.createClass({
  render: function() {
    return(
        <input value={this.props.singleIngredient} onChange={(e)=>this.props.updateValues(false,false,e.target.value)} className="list-group-item form-control" type="text" name="option[1]" placeholder="Ingredient 1" required/>
   );
  }
});

var AddModal = React.createClass({

  onCreateRecipe: function() {
    var form = $('#createRecipe');
    var submit = $('#submitRecipe');
    var thisHide = this.props;
    form.on('submit', function(e) {
      e.preventDefault();
      var serializedForm = form.serializeArray();
      var title = serializedForm[0].value;
      localStorage.setItem(title, JSON.stringify(serializedForm));
      thisHide.handleRecipesArrUpdate(thisHide.fetchUserRecipes);
      thisHide.onHide();
    });
  },

  formLogicAddOption: function() {

    this.props.pollOptionInc++;

    var str = '<input class="optionalOption list-group-item form-control" type="text" name="option[' + this.props.pollOptionInc + ']" placeholder="Ingredient ' + this.props.pollOptionInc + '" required>';
    $("#optionList").append(str);

  },

  formLogicRemoveOption: function() {
    if (parseInt(this.props.pollOptionInc) > 1) {

      --this.props.pollOptionInc;
      $("#optionList input:last").remove();
      if (parseInt(this.props.pollOptionInc) === 1) {
        //  this.props.handleBtnDisable("true");
      }
    }
  },
  handleModalIngredients(arr) {
    if(arr.length>0){
    this.props.pollOptionInc = arr.length;
    var newIngredientsArr = arr.map((object, i) => {
      return (<ModalIngredients singleIngredient = {object.value} />);
    });
    return newIngredientsArr;
    }else{
      return <ModalIngredients/>;
    }
  },

  render: function() {
    const popover = (
      <Popover id="modal-popover" title="popover">
        very popover. such engagement
      </Popover>
    );
    const tooltip = (
      <Tooltip id="modal-tooltip">
        wow.
      </Tooltip>
    );

    return (
      <div>
       
      
        <Modal show={this.props.showModal} onHide={this.props.onHide} >
          <Modal.Header bsClass="modal-header-primary" closeButton>
            <Modal.Title><b>Create your Recipe</b></Modal.Title>
          </Modal.Header >
          <Modal.Body bsClass="body-modal-color">
          <form className="formsStyle" id="createRecipe">

                    <div className="form-group">
                        <label className="control-label" for="title">Title:</label>
                        <input className="form-control" value={this.props.title} onChange={(e)=>this.props.updateValues(e.target.value,false,false)} placeholder="Please enter a title" name="title" type="text"required/>
                    </div>

                      <div className="form-group">
                        <label className="control-label" for="description">Instructions:</label>
                        <input onChange={(e)=>this.props.updateValues(false,e.target.value,false)} value={this.props.description} className="form-control" placeholder="Please enter some Instructions" name="description" type="text" required/>
                      </div>

                     <div className="form-group">
                       <label className="control-label" for="option">Enter at least one Ingredient:</label>
                           <div id="optionList" className="list-group">

                             {this.handleModalIngredients(this.props.ingredientsArray)}
               </div>
                    </div>
                    
                    
                   <div className=" row ">
                        <div className="col-md-6">  <button type="button" className="btn btn-block btn-primary" id="moreOptions" onClick= {this.formLogicAddOption}>Add More Ingredients</button></div>
                        
                       <div className="col-md-6">  <button disabled={!this.props.btnDisabled} type="button" className="btn btn-block btn-warning" id="remLastOption" onClick={this.formLogicRemoveOption}>Remove Last Ingredient</button></div>

                    </div>
                </form>
           
          </Modal.Body>
          <Modal.Footer bsClass="modal-header-primary-bottom">
                    <ButtonToolbar>

             <Button onClick={this.onCreateRecipe} id="submitRecipe" type="submit" form="createRecipe" bsStyle="success">Save</Button>
            <Button onClick={this.props.onHide}>Close</Button>
            </ButtonToolbar>
          </Modal.Footer>
            
        </Modal>
          
      </div>
    );
  }
});

var Main = React.createClass({
  getInitialState() {
    return {
      showModal: false,
      pollOptionInc: 1,
      btnDisabled: "true",
      recipesArr: this.fetchUserRecipes(),
      title: "",
      description: "",
      ingredientsArray: []
    };
  },
  handleRecipesArrUpdate(fn) {
    this.setState({
      recipesArr: fn()
    });
  },
  deleteUserRecipe(title) {
    localStorage.removeItem(title);
  },
  fetchUserRecipes() {

    var itemsArr = [];

    for (var i = 0; i < localStorage.length; i++) {
      var key = localStorage.key(i);
      itemsArr.push(JSON.parse(localStorage.getItem(key)));
    }
    ////RETURN AN ARRAY OF userRecipes USING .map();///

    var userRecipes = itemsArr.map((object, i) => {
      var ingredientsArr = object.slice(2, object.length + 1);
      return (<ItemRecipe
                key={(i+1)}
                myNum={(i+1)}
               title={object[0].value}
                description={object[1].value}
                ingredientsArr={ingredientsArr}
                deleteUserRecipe ={this.deleteUserRecipe}
                handleRecipesArrUpdate={this.handleRecipesArrUpdate}
                fetchUserRecipes={this.fetchUserRecipes}
                openToUpdate = {this.openToUpdate}
                
               />);
    });
    return userRecipes;

  },

  handleBtnDisable(val) {
    this.setState({
      btnDisabled: val
    });
  },

  close() {
    this.setState({
      showModal: false
    });
  },
  openToUpdate(title, description, ingredientsArray) {
    this.setState({
      showModal: true,
      title: title,
      description: description,
      ingredientsArray: ingredientsArray
    });

  },
  updateValues(title, description, ingredientsArray) {
    if (title!==false) {
      this.setState({
        title: title
      });
    }
    if (description!==false) {
      this.setState({
        description: description
      });
    }
    if (ingredientsArray!==false) {
      this.setState({
        ingredientsArray: ingredientsArray
      });
    }
    if (title !==false && description !==false && ingredientsArray!==false) {
      this.setState({
        title: "",
        description: "",
        ingredientsArray: []
      });
    }
  },
  open() {
    this.setState({
      showModal: true,
      title: '',
      description: '',
      ingredientsArray: []
    });
  },

  render: function() {

    return (
      <div>
    <h1 id="presentationText">Recipe Book - Acharya's kitchen </h1>
      <div  className="well" id="myContainerReact">
  
 
  <PanelGroup accordion>

     {this.state.recipesArr}
  </PanelGroup>

 
</div>
   <AddModal updateValues={this.updateValues} description={this.state.description} ingredientsArray={this.state.ingredientsArray} title={this.state.title} showModal={this.state.showModal} pollOptionInc={this.state.pollOptionInc} btnDisabled={this.state.btnDisabled} handleBtnDisable={this.handleBtnDisable} onHide={this.close} fetchUserRecipes={this.fetchUserRecipes} handleRecipesArrUpdate={this.handleRecipesArrUpdate} />    
<button className="btn btn-success btn-large" id="addReceipe" onClick={this.open}>Add a receipe</button>
        

</div>

    );
  }
});
var ItemRecipe = React.createClass({
  handleIngredients: function() {
    var newIngredientsArr = this.props.ingredientsArr.map((object, i) => {
      return (<ListGroupItem bsStyle="info">{object.value}</ListGroupItem>);
    });
    return newIngredientsArr;

  },
  render: function() {
    return (

      <Panel header={this.props.title}  bsStyle="primary"  eventKey={this.props.myNum} collapsible>
      <h4 style={{margin:0, padding:0}}><b>Instructions:</b> {this.props.description}</h4>
      <hr/>
      <h4><b>Ingredients:</b> </h4>
    <ListGroup >
      {this.handleIngredients()}
  </ListGroup>
        <ButtonToolbar>
       <Button onClick={()=>{this.props.deleteUserRecipe(this.props.title);           this.props.handleRecipesArrUpdate(this.props.fetchUserRecipes);
}} bsStyle="danger">Delete</Button>
       <Button onClick={()=>{this.props.openToUpdate(this.props.title,this.props.description, this.props.ingredientsArr)}} bsStyle="warning">Edit</Button>
        </ButtonToolbar>
      
      </Panel>

    );
  }
});

ReactDOM.render(
  <Main />,
  document.querySelector('#rootDiv')
);